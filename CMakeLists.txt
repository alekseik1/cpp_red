cmake_minimum_required(VERSION 3.16)
enable_language(CXX)
set(CMAKE_CXX_STANDARD 17)
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_CXX_FLAGS "-Wall -Wextra")
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")


set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

project(w1)
include_directories(headers/)
#add_executable(log w1/logger.cpp)
add_executable(ticket w1/sort_by.cpp)
add_executable(update_field w1/update_field.cpp)
add_executable(bad_macros w1/bad_macros.cpp)
add_executable(deque w1/deque.cpp)
add_executable(paginator w1/paginator.cpp)

project(w2)
add_executable(sort_students w2/sort_students.cpp)
add_executable(learner w2/learner.cpp)
add_executable(books_slow w2/slow.cpp)
add_executable(books_fast w2/fast.cpp)
add_executable(booking w2/booking.cpp)

project(w3)
include_directories(headers)
add_executable(object_pool w3/object_pool.cpp)
add_executable(swap_reverse_copy w3/swap_sort_copy.cpp)
add_executable(simple_vector w3/simple_vector.cpp)
add_executable(linked_list w3/linked_list.cpp)
add_executable(string_set w3/string_set.cpp)
add_executable(sportsmen w3/sportsmen.cpp)
add_executable(stack_vector w3/stack_vector.cpp)
add_executable(my_swap w3/my_swap.cpp)
add_executable(airport_counter w3/airport_counter.cpp)
add_executable(text_editor w3/text_editor.cpp)
add_executable(merge_sort w3/merge_sort_3.cpp)
add_executable(priority_collection w3/priority_collection_2.cpp)

project(w3/server_stats)
include_directories(headers)
include_directories(w3/server_stats)
add_executable(server_stats_test w3/server_stats/stats_tests.cpp w3/server_stats/stats.cpp)

project(w4)
include_directories(headers)
add_executable(joseph_counter w4/joseph_counter.cpp)
add_executable(string_grouping w4/string_grouping.cpp)
add_executable(token_split w4/token_split.cpp)

project(w4_async)
add_executable(matrix_sum w4/matrix_sum.cpp)
target_link_libraries(matrix_sum PRIVATE Threads::Threads)
add_executable(explore_keywords w4/explore_key_words.cpp)
target_link_libraries(explore_keywords PRIVATE Threads::Threads)
add_executable(synchronized w4/synchronized.cpp)
target_link_libraries(synchronized PRIVATE Threads::Threads)
add_executable(concurrent_map w4/concurrent_map.cpp)
target_link_libraries(concurrent_map PRIVATE Threads::Threads)
